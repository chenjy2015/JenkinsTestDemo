apply plugin: 'com.android.application'

//接收Jenkins传递过来的参数
def version_name = System.getProperty('VERSION_NAME', 'v1.0')

def version_code = Integer.parseInt(System.getProperty('VERSION_CODE', '1'))


android {
    compileSdkVersion 26
    defaultConfig {
        applicationId "com.example.chenjiayou.myapplication"
        minSdkVersion 24
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true   // 解决Dex超出方法数的限制问题
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }

    dataBinding.enabled = true  // Data Binding Library（数据绑定框架）

    dexOptions {
        javaMaxHeapSize "4g" // 增加java堆内存大小（增加dex操作的堆大小）
    }

    lintOptions {
        checkReleaseBuilds false // false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }


    signingConfigs {
        debugConfig {
            keyAlias DEBUG_ALIAS
            keyPassword DEBUG_PASSWROD
            storeFile file(DEBUG_STORE_FILE)
            storePassword DEBUG_STORE_PASSWORD
        }
        releaseConfig {
            keyAlias RELEASE_ALIAS
            keyPassword RELEASE_PASSWROD
            storeFile file(RELEASE_STORE_FILE)
            storePassword RELEASE_STORE_PASSWORD
        }
    }


    buildTypes {
        // 调试环境（测试环境服务器，不带混淆，可打印日志）
        debug {
//            manifestPlaceholders = [BAIDU_KEY_VALUE: "BDkrlSp5O2F56GRU8G3t5ZAA1De2VGte",
//                                    JPUSH_APPKEY   : "c9634d1970593188a67b1e77",
//                                    JPUSH_PKGNAME  : "com.oxbix.spanlogistics.debug",
//                                    JPUSH_CHANNEL  : "developer-default" //暂时填写默认值即可.]
//            ]
//            buildConfigField "boolean", "isDebug", "true"
//            resValue "string", "app_name", "测试版"
            //混淆
            minifyEnabled false
            shrinkResources false
            debuggable true

            //前一部分代表系统默认的android程序的混淆文件，该文件已经包含了基本的混淆声明，后一个文件是自己的定义混淆文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro', 'proguard-x5.cfg'
            signingConfig signingConfigs.releaseConfig
//            applicationIdSuffix '.debug'//区分debug版本的包名，会自动在正式包名后面带上.debug
        }

        // 发布环境（线上环境服务器，带混淆，不可打印日志）
        release {
//            manifestPlaceholders = [BAIDU_KEY_VALUE: "jQR7Yr7COOAKqs3T2GudKeHW1UzgYbqg",
//                                    JPUSH_APPKEY   : "7db3190162817c50f34df055",
//                                    JPUSH_PKGNAME  : "com.oxbix.spanlogistics",
//                                    JPUSH_CHANNEL  : "developer-default" //暂时填写默认值即可.]
//            ]
//            buildConfigField "boolean", "isDebug", "false"
//            resValue "string", "app_name", "正式版"

            //混淆
            minifyEnabled true
            shrinkResources true

            //前一部分代表系统默认的android程序的混淆文件，该文件已经包含了基本的混淆声明，后一个文件是自己的定义混淆文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro', 'proguard-x5.cfg'
            signingConfig signingConfigs.releaseConfig
        }

        // 测试环境（测试支付专用）
        dev {
            matchingFallbacks = ['dev', 'preview', 'debug', 'release']
//            manifestPlaceholders = [BAIDU_KEY_VALUE: "jQR7Yr7COOAKqs3T2GudKeHW1UzgYbqg",
//                                    JPUSH_APPKEY   : "7db3190162817c50f34df055",
//                                    JPUSH_PKGNAME  : "com.oxbix.spanlogistics",
//                                    JPUSH_CHANNEL  : "developer-default" //暂时填写默认值即可.]
//            ]
//            buildConfigField "boolean", "isDebug", "true"
//            resValue "string", "app_name", "开发版"
            //混淆
            minifyEnabled true
            shrinkResources true
            debuggable true

            //前一部分代表系统默认的android程序的混淆文件，该文件已经包含了基本的混淆声明，后一个文件是自己的定义混淆文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro', 'proguard-x5.cfg'
            signingConfig signingConfigs.releaseConfig
        }

        // 预览环境（正式环境服务器，不带混淆，可打印日志，因不带混淆可快速编译打包方便开发）
        previewDev {
            //关键代码，release， debug为library中已有buildType
            matchingFallbacks = ['preview', 'debug', 'release']
//
//            manifestPlaceholders = [BAIDU_KEY_VALUE: "jQR7Yr7COOAKqs3T2GudKeHW1UzgYbqg",
//                                    JPUSH_APPKEY   : "7db3190162817c50f34df055",
//                                    JPUSH_PKGNAME  : "com.oxbix.spanlogistics",
//                                    JPUSH_CHANNEL  : "developer-default" //暂时填写默认值即可.]
//            ]
//            buildConfigField "boolean", "isDebug", "true"
//            resValue "string", "app_name", "预览版"
            //混淆
            minifyEnabled false
            shrinkResources false
            debuggable true

            //前一部分代表系统默认的android程序的混淆文件，该文件已经包含了基本的混淆声明，后一个文件是自己的定义混淆文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro', 'proguard-x5.cfg'
            signingConfig signingConfigs.releaseConfig
//            applicationIdSuffix '.preview'
        }
    }


    flavorDimensions "product"

    productFlavors {
        // 测试
        my_test {
            applicationId "com.example.chenjiayou.myapplication"
            versionCode version_code
            versionName version_name
            dimension 'product'
        }
        // 正式
        my_product {
            applicationId "com.example.chenjiayou.myapplication"
            versionCode version_code
            versionName version_name
            dimension 'product'
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def fileName
//                fileName = "${variant.flavorName}_${variant.buildType.name}_${releaseTime()}_${variant.versionName}.apk"
                fileName = "app-" + "${variant.buildType.name}_${variant.versionName}.apk"
                output.outputFileName = fileName
            }
        }
    }

    // 使用JavaJDK1.8版本
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}


static def releaseTime() {
    def format = new Date().format("yyyy-MM-dd")
    return format
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    implementation project(':style')

    // --------------------------  lifecycle  --------------------------
    def lifecycle_version = "1.1.1"

    // ViewModel and LiveData
    implementation "android.arch.lifecycle:extensions:$lifecycle_version"
    // alternatively - just ViewModel
    implementation "android.arch.lifecycle:viewmodel:$lifecycle_version" // use -ktx for Kotlin
    // alternatively - just LiveData
    implementation "android.arch.lifecycle:livedata:$lifecycle_version"
    // alternatively - Lifecycles only (no ViewModel or LiveData).
    //     Support library depends on this lightweight import
    implementation "android.arch.lifecycle:runtime:$lifecycle_version"

    annotationProcessor "android.arch.lifecycle:compiler:$lifecycle_version"
    // alternately - if using Java8, use the following instead of compiler
    implementation "android.arch.lifecycle:common-java8:$lifecycle_version"

    // optional - ReactiveStreams support for LiveData
    implementation "android.arch.lifecycle:reactivestreams:$lifecycle_version"

    // optional - Test helpers for LiveData
    testImplementation "android.arch.core:core-testing:$lifecycle_version"

    // ----------------------------- RxJava/RxAndroid（综合库）-----------------------------
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'

    // RxLifeCycle（管理Rx系列的（所有观察者）生命周期）
    implementation 'com.trello.rxlifecycle2:rxlifecycle:2.2.1'
    implementation 'com.trello.rxlifecycle2:rxlifecycle-android-lifecycle:2.2.1'

    // RxBinding（UI响应式绑定）
    implementation 'com.jakewharton.rxbinding2:rxbinding:2.0.0'
    implementation 'com.jakewharton.rxbinding2:rxbinding-support-v4:2.0.0'
    implementation 'com.jakewharton.rxbinding2:rxbinding-appcompat-v7:2.0.0'

    // RxPermissions（6.0以上动态权限管理）
    implementation 'com.tbruyelle.rxpermissions2:rxpermissions:0.9.4@aar'
}
